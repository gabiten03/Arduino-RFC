//RST          D9
//SDA(SS)      D10
//MOSI         D11
//MISO         D12
//SCK          D13

#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

//Crear el objeto lcd  dirección  0x3F y 16 columnas x 2 filas
LiquidCrystal_I2C lcd(0x27,16,2);  //



const int RST_PIN = 9;        // Pin 9 para el reset del RC522
const int SS_PIN = 10;        // Pin 10 para el SS (SDA) del RC522
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Crear instancia del MFRC522

byte validKey1[4] = { 0xEF, 0x13, 0x6E, 0x05 };  // Ejemplo de clave valida



//Función para comparar dos vectores
bool isEqualArray(byte* arrayA, byte* arrayB, int length)
{
  for (int index = 0; index < length; index++)
  {
    if (arrayA[index] != arrayB[index]) return false;
  }
  return true;
}

void setup() {
  Serial.begin(9600); // Iniciar serial
  SPI.begin();        // Iniciar SPI
  mfrc522.PCD_Init(); // Iniciar MFRC522

  // Inicializar el LCD
  lcd.init();
  
  //Encender la luz de fondo.
 
  
  // Escribimos el Mensaje en el LCD.
  lcd.print("Reservator 2.0");
}


void loop() {
  // Detectar tarjeta
  if (mfrc522.PICC_IsNewCardPresent())
  {
    //Seleccionamos una tarjeta
    if (mfrc522.PICC_ReadCardSerial())
    {
      // Comparar ID con las claves válidas
      if (isEqualArray(mfrc522.uid.uidByte, validKey1, 4))
        {Serial.println("Tarjeta valida");
        lcd.setCursor(0, 1);
         lcd.backlight();
         


  lcd.print("Acceso Permitido");
   delay(3000);}
        
      else {
        Serial.println("Tarjeta invalida");         
        lcd.backlight();
        lcd.setCursor(0, 1);
        lcd.print("Acceso Denegado");
         delay(3000);}

      // Finalizar lectura actual
         mfrc522.PICC_HaltA();
    }
  }
  delay(250);
  lcd.noBacklight();
  lcd.clear();



}
